$
$ Set covering in Essence'.
$
$ This is a rather general model for the following problem.
$
$ From Nathan Brixius
$ "Don't be a hero when trying to solve set covering problems"
$ http://blogs.msdn.com/b/natbr/archive/2010/06/19/don-t-be-a-hero-when-trying-to-solve-set-covering-problems.aspx
$ """
$ A colleague posted an interesting question to an internal discussion 
$ board the other day:
$ 
$ Given a set of code blocks changed between two versions of the same 
$ binary, and approximated code coverage for the new binary, what are 
$ the optimal tests that cover all changed part of the new binary and 
$ are least costly to run?
$ 
$ Example: (A "1" in a cell (Bi, Tj) means that block i is tested by test j)
$     	B1 	B2 	B3 	B4 	B5 	B6 	Cost
$ T1 	1 	1 	1 	1 	1 	1 	50
$ T2 	0 	1 	1 	1 	1 	1 	20
$ T3 	1 	1 	1 	0 	0 	0 	15
$ T4 	0 	0 	0 	1 	1 	1 	15
$
$ The optimal solution is T3, T4 with minimized cost 15 + 15 = 30. 
$ The best greedy solution that we have is T2, T3 with cost 20 + 15 = 35.
$
$ The colleague who posted this question also posted a mathematical 
$ formulation for the problem:
$
$ Binary integer problem statement:
$
$ One constraint for each binary block that needs to be covered to 
$ make sure we archive maximum coverage. One variable for each test 
$ in the list that we try to optimize.
$
$ Block 1:   X1 + X3 > 0
$ Block 2:   X1 + X2 + X3 > 0
$ Block 3:   X1 + X2 + X3 > 0
$ Block 4:   X1 + X2 + X4 > 0
$ Block 5:   X1 + X2 + X4 > 0
$ Block 6:   X1 + X2 + X4 > 0
$
$ X1, X2, X3, X4 = {0, 1}
$
$ Cost function to optimize: 50*X1 + 20*X2 + 15*X3 + 15*X4
$ """
$

$
$
$ Model created by Hakan Kjellerstrand, hakank@gmail.com
$ See also my Essence'/Tailor page: http://www.hakank.org/savile_row/
$
language ESSENCE' 1.0


$ data (from Brixius blog post)
letting num_t be 4
letting num_b be 6
letting t_costs: matrix indexed by [int(1..num_t)] of int(0..100) be [50,20,15,15]
letting mat: matrix indexed by [int(1..num_t), int(1..num_b)] of int(0..1) be
   [
   [1,1,1,1,1,1],
   [0,1,1,1,1,1],
   [1,1,1,0,0,0],
   [0,0,0,1,1,1]
   ]

$ decision variables
find x: matrix indexed by [int(1..num_t)] of int(0..1)
find total_cost: int(0..100)

minimising total_cost

such that
   forall j: int(1..num_b) . (sum i: int(1..num_t) . x[i]*mat[i,j]) >= 1
   ,
   total_cost = sum i: int(1..num_t) . x[i]*t_costs[i]

