$
$ Coins grid puzzle in Essence'.
$
$ Problem from 
$ Tony Hurlimann: "A coin puzzle - SVOR-contest 2007"
$ http://www.svor.ch/competitions/competition2007/AsroContestSolution.pdf
$
$ """
$ In a quadratic grid (or a larger chessboard) with 31x31 cells, one should 
$ place coins in such a
$ way that the following conditions are fulfilled:
$    1. In each row exactly 14 coins must be placed.
$    2. In each column exactly 14 coins must be placed.
$    3. The sum of the quadratic horizontal distance from the main diagonal 
$       of all cells
$       containing a coin must be as small as possible.
$    4. In each cell at most one coin can be placed.
$ The description says to place 14x31 = 434 coins on the chessboard 
$ each row containing 14
$ coins and each column also containing 14 coins.
$ """
$
$ Cf the LPL model:
$ http://diuflx71.unifr.ch/lpl/GetModel?name=/puzzles/coin
$
$ Note: This problem is very slow with constraint programming,
$       hence the low values of n and c below.
$       Integer programming solvers are very fast, however.
$
$ Compare with the following models:
$ * Choco: http://www.hakank.org/choco/CoinsGrid.java
$ * Comet: http://www.hakank.org/comet/coins_grid.co
$ * ECLiPSE: http://www.hakank.org/eclipse/coins_grid.ecl
$   (MIP solver eplex)
$ * Gecode: http://www.hakank.org/gecode/coins_grid.cpp
$   (MIP solver)
$ * Gecode/R: http://www.hakank.org/gecode_r/coins_grid.rb
$ * JaCoP: http://www.hakank.org/JaCoP/CoinsGrid.java
$ * MiniZinc: http://www.hakank.org/minizinc/coins_grid.mzn
$   (fast with a MIP solver)
$
$ Model created by Hakan Kjellerstrand, hakank@gmail.com
$ See also my Essence'/Tailor page: http://www.hakank.org/savile_row/
$
language ESSENCE' 1.0

$ given n : int $ the grid size
$ given c : int $ number of coins per row/column
letting n be 8 $ 31
letting range be domain int(1..n)
letting c be 3  $ 14

find x : matrix indexed by [int(1..n),int(1..n)] of int(0..1)
find z : int(0..1000000)

minimising z

such that
  $ rows
  forall i : range . 
       sum(x[i,..]) = c /\  
       sum(x[..,i]) = c
  ,

  $ quadratic horizonal distance (to minimize)
  $ Note: ESSENCE' define abs(...) as |...|
  z = sum i,j : range . x[i,j]*(|i-j|*|i-j|)
