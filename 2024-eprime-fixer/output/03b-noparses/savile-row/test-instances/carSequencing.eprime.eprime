$$ param file: savile-row/test-instances/carSequencing.eprime.param

language ESSENCE' 1.0
$ loaded file: carseqdata/csplib-instance-31
letting numcars=200
letting numclasses=23
letting numoptions=5
letting optMax=[1, 2, 1, 2, 1]
letting windowSize=[2, 3, 3, 5, 5]
letting numberPerClass=[3, 4, 12, 3, 19, 2, 3, 7, 2, 1, 26, 35, 2, 6, 7, 1, 1, 2, 48, 2, 2, 9, 3]
letting optionsRequired=[[1, 0, 1, 1, 0], [1, 0, 0, 0, 1], [1, 1, 0, 0, 0], [1, 1, 1, 0, 0], [0, 0, 0, 0, 1], [1, 1, 0, 0, 1], [1, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 1, 0, 1], [1, 0, 1, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 1, 0, 1], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 0, 0, 1, 1], [0, 0, 1, 1, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 0], [0, 1, 1, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 0, 0], [1, 0, 0, 1, 0]]
$$ model file: savile-row/test-instances/carSequencing.eprime

$ given numcars : int(1..)
$ given numclasses : int(1..)
$ given numoptions : int(1..)
$ given optMax : matrix indexed by [int(1..numoptions)] of int(0..)
$ given windowSize : matrix indexed by [int(1..numoptions)] of int(0..)
$ given optionsRequired : matrix indexed by [int(1..numclasses),int(1..numoptions)] of int(0..1)
$ given numberPerClass : matrix indexed by [int(1..numclasses)] of int(1..)
find seq : matrix indexed by [int(1..numcars)] of int(1..numclasses)
such that
(forAll option : int(1..numoptions) . (forAll windowStart : int(1..((numcars - windowSize[option]) + 1)) . (((sum pos : int(windowStart..((windowStart + windowSize[option]) - 1)) . (seq[pos] in toSet([class|class : int(1..numclasses), ((optionsRequired[class, option]=1)) ]))))<=optMax[option]))),
(forAll option : int(1..numoptions) . (((sum pos : int(1..numcars) . (seq[pos] in toSet([class|class : int(1..numclasses), ((optionsRequired[class, option]=1)) ]))))=((sum class : int(1..numclasses) . (optionsRequired[class, option] * numberPerClass[class]))))),
gcc(seq,[i|i : int(1..numclasses), () ],numberPerClass)
