$
$ Young tableaux in Essence'.
$ 
$ See 
$ http://mathworld.wolfram.com/YoungTableau.html
$ and
$ http://en.wikipedia.org/wiki/Young_tableau
$ """
$ The partitions of 4 are
$  {4}, {3,1}, {2,2}, {2,1,1}, {1,1,1,1}
$
$ And the corresponding standard Young tableaux are:
$
$ 1.   1 2 3 4
$
$ 2.   1 2 3         1 2 4    1 3 4
$      4             3        2
$
$ 3.   1 2           1 3
$      3 4           2 4
$
$ 4    1 2           1 3      1 4 
$      3             2        2 
$      4             4        3
$
$ 5.   1
$      2
$      3
$      4
$ """
$
$ Compare with the following models:
$   * MiniZinc: http://www.hakank.org/minizinc/young_tableaux.mzn
$   * Choco   : http://www.hakank.org/choco/YoungTableuax.java
$   * JaCoP   : http://www.hakank.org/JaCoP/YoungTableuax.java
$   * Comet   : http://www.hakank.org/comet/young_tableaux.co
$   * Gecode  : http://www.hakank.org/gecode/young_tableaux.cpp
$   * ECLiPSe : http://www.hakank.org/eclipse/young_tableaux.ecl
$
$ Model created by Hakan Kjellerstrand, hakank@gmail.com
$ See also my Essence'/Tailor page: http://www.hakank.org/savile_row/
$
language ESSENCE' 1.0

$ The empty cells in x are represented as the number n+1 for simplifying the
$ comparisons. 

$ given n : int
letting n be 4

find x : matrix indexed by [int(1..n), int(1..n)] of int(1..n+1)
find p : matrix indexed by [int(1..n)] of int(0..n+1) $ the partition structure

such that
   $ 1..n is used exactly once. (n+1, however, is used many times)
   forall i : int(1..n) . 
      1 = sum j,k : int(1..n) . x[j,k] = i,

   $ always have 1 at the upper left corner
   x[1,1] = 1,

   $ row wise
   forall i : int(1..n) . 
     $ decreasing
     forall j : int(2..n) .
        x[i,j] >= x[i,j-1]
   ,

   $ column wise
   forall j : int(1..n) .
     $ decreasing
     forall i : int(2..n) . 
        x[i,j] >= x[i-1,j]
   ,

   $ calculate the structure (the partition)
   forall i : int(1..n) . 
     p[i] = (sum j : int(1..n) . (x[i,j] <= n)),

   $ order p
   forall i : int(2..n) . p[i-1] >= p[i],
   
   $ implicit constraint
   $ sum of partitions is n
   n = (sum i : int(1..n) . p[i])
