language ESSENCE' 1.0
given w : int(..)
given n : int(..)
given pInit : int(..)
given stps : int(..)
given noWalls : int(..)
given noInvalidMoves : int(..)
given noGoals : int(..)
given noCrates : int(..)
letting WALLINDICES be domain int(0..(noWalls - 1))
letting GOALINDICES be domain int(0..(noGoals - 1))
letting CRATEINDICES be domain int(0..(noCrates - 1))
letting POSITIONS be domain int(0..(n - 1))
given walls : matrix indexed by [WALLINDICES] of POSITIONS
given invalidMoves : matrix indexed by [INVALIDMOVEINDICES] of MOVES
given goals : matrix indexed by [GOALINDICES] of int(0..(n - 1))
given crates : matrix indexed by [CRATEINDICES] of int(0..(n - 1))
letting MOVES be (((int((-w)) union int((-1))) union int(1)) union int(w))
letting STEPS be domain int(0..(stps - 1))
find sokPosn : matrix indexed by [STEPS] of int(0..(n - 1))
find move : matrix indexed by [int(0..(stps - 2))] of MOVES
find crateGoalPosns : matrix indexed by [STEPS,CRATEINDICES] of int(0..(n - 1))
such that
(sokPosn[0]=pInit),
(forAll i : STEPS . (forAll wll : WALLINDICES . (sokPosn[i]!=walls[wll]))),
(forAll i : int(0..(stps - 2)) . (sokPosn[(i + 1)]=((sokPosn[i] + move[i])))),
(forAll ck : int(0..(noCrates - 1)) . (crateGoalPosns[0, ck]=crates[ck])),
(forAll s : STEPS . allDiff(crateGoalPosns[s,..])),
(forAll k : int(0..(stps - 2)) . (forAll c : CRATEINDICES . ((((sokPosn[(k + 1)]=crateGoalPosns[k, c])) -> ((crateGoalPosns[(k + 1), c]=((crateGoalPosns[k, c] + move[k])))))))),
(forAll i : int(0..(stps - 2)) . (forAll c : CRATEINDICES . ((((sokPosn[(i + 1)]=crateGoalPosns[i, c])) \/ ((crateGoalPosns[(i + 1), c]=crateGoalPosns[i, c])))))),
(forAll c : CRATEINDICES . (exists g : GOALINDICES . (crateGoalPosns[(stps - 1), c]=goals[g])))
