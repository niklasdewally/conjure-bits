$$ param file: savile-row/test-instances/diet.eprime.param

$ Diet problem instance
$
$ Minimize the cost for the products:
$ Type of                        Calories   Chocolate    Sugar    Fat
$ Food                                      (ounces)     (ounces) (ounces)
$ Chocolate Cake (1 slice)       400           3            2      2
$ Chocolate ice cream (1 scoop)  200           2            2      4
$ Cola (1 bottle)                150           0            4      1
$ Pineapple cheesecake (1 piece) 500           0            4      5
$
$ created by Hakan Kjellerstrand, hakank@bonetmail.com
$ See also Hakan's Essence'/Tailor page: http://www.hakank.org/minion_tailor

language ESSENCE' 1.0

letting n be 4
letting p be 4
letting price be     [50, 20, 30, 80]
letting tlimits be   [500, 6,10,8]
letting calories be  [400, 200, 150, 500]
letting chocolate be [3,2,0,0]
letting sugar be     [2,2,4,4]
letting fat be       [2,4,1,5]
$$ model file: savile-row/test-instances/diet.eprime

$ given n : int(..)
$ given p : int(..)
$ given price : matrix indexed by [int(1..p)] of int(1..100)
$ given tlimits : matrix indexed by [int(1..p)] of int(1..1000)
$ given calories : matrix indexed by [int(1..n)] of int(1..1000)
$ given chocolate : matrix indexed by [int(1..n)] of int(0..100)
$ given sugar : matrix indexed by [int(1..n)] of int(1..100)
$ given fat : matrix indexed by [int(1..n)] of int(1..100)
find x : matrix indexed by [int(1..p)] of int(0..1000)
find cost : int(0..10000)
minimising cost
such that
(cost=((sum i : int(1..p) . (x[i] * price[i])))),
(tlimits[1]<=((sum i : int(1..n) . (x[i] * calories[i])))),
(tlimits[2]<=((sum i : int(1..n) . (x[i] * chocolate[i])))),
(tlimits[3]<=((sum i : int(1..n) . (x[i] * sugar[i])))),
(tlimits[4]<=((sum i : int(1..n) . (x[i] * fat[i]))))
