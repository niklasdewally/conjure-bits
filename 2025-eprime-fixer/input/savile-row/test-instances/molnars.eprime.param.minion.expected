MINION 3
**VARIABLES**
DISCRETE M_00000_00000 #
{-4..4}
**CONSTRAINTS**
w-inintervalset(M_00000_00000, [-4,-2,0,0,2,4])
**VARIABLES**
DISCRETE M_00000_00001 #
{-4..4}
**CONSTRAINTS**
w-inintervalset(M_00000_00001, [-4,-2,0,0,2,4])
**VARIABLES**
DISCRETE M_00000_00002 #
{-4..4}
**CONSTRAINTS**
w-inintervalset(M_00000_00002, [-4,-2,0,0,2,4])
**VARIABLES**
DISCRETE M_00001_00000 #
{-4..4}
**CONSTRAINTS**
w-inintervalset(M_00001_00000, [-4,-2,0,0,2,4])
**VARIABLES**
DISCRETE M_00001_00001 #
{-4..4}
**CONSTRAINTS**
w-inintervalset(M_00001_00001, [-4,-2,0,0,2,4])
**VARIABLES**
DISCRETE M_00001_00002 #
{-4..4}
**CONSTRAINTS**
w-inintervalset(M_00001_00002, [-4,-2,0,0,2,4])
**VARIABLES**
DISCRETE M_00002_00000 #
{-4..4}
**CONSTRAINTS**
w-inintervalset(M_00002_00000, [-4,-2,0,0,2,4])
**VARIABLES**
DISCRETE M_00002_00001 #
{-4..4}
**CONSTRAINTS**
w-inintervalset(M_00002_00001, [-4,-2,0,0,2,4])
**VARIABLES**
DISCRETE M_00002_00002 #
{-4..4}
**CONSTRAINTS**
w-inintervalset(M_00002_00002, [-4,-2,0,0,2,4])
**VARIABLES**
DISCRETE det #
{-1..1}
**CONSTRAINTS**
w-inintervalset(det, [-1,-1,1,1])
**VARIABLES**
DISCRETE squaredet #
{-1..1}
**CONSTRAINTS**
w-inintervalset(squaredet, [-1,-1,1,1])
**VARIABLES**
DISCRETE aux14 #(-M_00002_00001)
{-4..4}
DISCRETE aux15 #(aux14 * M_00002_00001)
{-16..16}
DISCRETE aux16 #(aux15 * M_00000_00000)
{-64..64}
DISCRETE aux17 #(aux16 * M_00000_00000)
{-256..256}
DISCRETE aux18 #(aux17 * M_00001_00002)
{-1024..1024}
DISCRETE aux19 #(aux18 * M_00001_00002)
{-4096..4096}
DISCRETE aux20 #(-M_00002_00002)
{-4..4}
DISCRETE aux21 #(aux20 * M_00002_00002)
{-16..16}
DISCRETE aux22 #(aux21 * M_00000_00001)
{-64..64}
DISCRETE aux23 #(aux22 * M_00000_00001)
{-256..256}
DISCRETE aux24 #(aux23 * M_00001_00000)
{-1024..1024}
DISCRETE aux25 #(aux24 * M_00001_00000)
{-4096..4096}
DISCRETE aux26 #(M_00002_00000 * M_00002_00000)
{-16..16}
DISCRETE aux27 #(aux26 * M_00000_00001)
{-64..64}
DISCRETE aux28 #(aux27 * M_00000_00001)
{-256..256}
DISCRETE aux29 #(aux28 * M_00001_00002)
{-1024..1024}
DISCRETE aux30 #(aux29 * M_00001_00002)
{-4096..4096}
DISCRETE aux31 #(M_00002_00001 * M_00002_00001)
{-16..16}
DISCRETE aux32 #(aux31 * M_00000_00002)
{-64..64}
DISCRETE aux33 #(aux32 * M_00000_00002)
{-256..256}
DISCRETE aux34 #(aux33 * M_00001_00000)
{-1024..1024}
DISCRETE aux35 #(aux34 * M_00001_00000)
{-4096..4096}
DISCRETE aux36 #(M_00002_00002 * M_00002_00002)
{-16..16}
DISCRETE aux37 #(aux36 * M_00000_00000)
{-64..64}
DISCRETE aux38 #(aux37 * M_00000_00000)
{-256..256}
DISCRETE aux39 #(aux38 * M_00001_00001)
{-1024..1024}
DISCRETE aux40 #(aux39 * M_00001_00001)
{-4096..4096}
DISCRETE aux41 #(-M_00002_00000)
{-4..4}
DISCRETE aux42 #(aux41 * M_00002_00000)
{-16..16}
DISCRETE aux43 #(aux42 * M_00000_00002)
{-64..64}
DISCRETE aux44 #(aux43 * M_00000_00002)
{-256..256}
DISCRETE aux45 #(aux44 * M_00001_00001)
{-1024..1024}
DISCRETE aux46 #(aux45 * M_00001_00001)
{-4096..4096}
BOUND aux47 #(aux19 + aux25 + aux30 + aux35 + aux40 + aux46)
{-24576..24576}
DISCRETE aux48 #(-M_00002_00000)
{-4..4}
DISCRETE aux49 #(aux48 * M_00000_00002)
{-16..16}
DISCRETE aux50 #(aux49 * M_00001_00001)
{-64..64}
DISCRETE aux51 #(-M_00002_00001)
{-4..4}
DISCRETE aux52 #(aux51 * M_00000_00000)
{-16..16}
DISCRETE aux53 #(aux52 * M_00001_00002)
{-64..64}
DISCRETE aux54 #(-M_00002_00002)
{-4..4}
DISCRETE aux55 #(aux54 * M_00000_00001)
{-16..16}
DISCRETE aux56 #(aux55 * M_00001_00000)
{-64..64}
DISCRETE aux57 #(M_00002_00000 * M_00000_00001)
{-16..16}
DISCRETE aux58 #(aux57 * M_00001_00002)
{-64..64}
DISCRETE aux59 #(M_00002_00001 * M_00000_00002)
{-16..16}
DISCRETE aux60 #(aux59 * M_00001_00000)
{-64..64}
DISCRETE aux61 #(M_00002_00002 * M_00000_00000)
{-16..16}
DISCRETE aux62 #(aux61 * M_00001_00001)
{-64..64}
DISCRETE aux63 #(aux50 + aux53 + aux56 + aux58 + aux60 + aux62)
{-384..384}
**SEARCH**
PRINT[[M_00000_00000],[M_00000_00001],[M_00000_00002],[M_00001_00000],[M_00001_00001],[M_00001_00002],[M_00002_00000],[M_00002_00001],[M_00002_00002],[det],[squaredet]]
VARORDER STATIC [M_00000_00000, M_00000_00001, M_00000_00002, M_00001_00000, M_00001_00001, M_00001_00002, M_00002_00000, M_00002_00001, M_00002_00002, det, squaredet]
VARORDER AUX [M_00000_00000,M_00000_00001,M_00000_00002,M_00001_00000,M_00001_00001,M_00001_00002,M_00002_00000,M_00002_00001,M_00002_00002,det,squaredet,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24,aux25,aux26,aux27,aux28,aux29,aux30,aux31,aux32,aux33,aux34,aux35,aux36,aux37,aux38,aux39,aux40,aux41,aux42,aux43,aux44,aux45,aux46,aux47,aux48,aux49,aux50,aux51,aux52,aux53,aux54,aux55,aux56,aux57,aux58,aux59,aux60,aux61,aux62,aux63]
**CONSTRAINTS**
minuseq(aux14, M_00002_00001)
product(aux14, M_00002_00001, aux15)
product(aux15, M_00000_00000, aux16)
product(aux16, M_00000_00000, aux17)
product(aux17, M_00001_00002, aux18)
product(aux18, M_00001_00002, aux19)
minuseq(aux20, M_00002_00002)
product(aux20, M_00002_00002, aux21)
product(aux21, M_00000_00001, aux22)
product(aux22, M_00000_00001, aux23)
product(aux23, M_00001_00000, aux24)
product(aux24, M_00001_00000, aux25)
product(M_00002_00000, M_00002_00000, aux26)
product(aux26, M_00000_00001, aux27)
product(aux27, M_00000_00001, aux28)
product(aux28, M_00001_00002, aux29)
product(aux29, M_00001_00002, aux30)
product(M_00002_00001, M_00002_00001, aux31)
product(aux31, M_00000_00002, aux32)
product(aux32, M_00000_00002, aux33)
product(aux33, M_00001_00000, aux34)
product(aux34, M_00001_00000, aux35)
product(M_00002_00002, M_00002_00002, aux36)
product(aux36, M_00000_00000, aux37)
product(aux37, M_00000_00000, aux38)
product(aux38, M_00001_00001, aux39)
product(aux39, M_00001_00001, aux40)
minuseq(aux41, M_00002_00000)
product(aux41, M_00002_00000, aux42)
product(aux42, M_00000_00002, aux43)
product(aux43, M_00000_00002, aux44)
product(aux44, M_00001_00001, aux45)
product(aux45, M_00001_00001, aux46)
minuseq(aux48, M_00002_00000)
product(aux48, M_00000_00002, aux49)
product(aux49, M_00001_00001, aux50)
minuseq(aux51, M_00002_00001)
product(aux51, M_00000_00000, aux52)
product(aux52, M_00001_00002, aux53)
minuseq(aux54, M_00002_00002)
product(aux54, M_00000_00001, aux55)
product(aux55, M_00001_00000, aux56)
product(M_00002_00000, M_00000_00001, aux57)
product(aux57, M_00001_00002, aux58)
product(M_00002_00001, M_00000_00002, aux59)
product(aux59, M_00001_00000, aux60)
product(M_00002_00002, M_00000_00000, aux61)
product(aux61, M_00001_00001, aux62)
lexleq([M_00001_00000, M_00001_00001, M_00001_00002],[M_00002_00000, M_00002_00001, M_00002_00002])
lexleq([M_00000_00001, M_00001_00001, M_00002_00001],[M_00000_00002, M_00001_00002, M_00002_00002])
lexleq([M_00000_00000, M_00001_00000, M_00002_00000],[M_00000_00001, M_00001_00001, M_00002_00001])
eq(aux47,squaredet)
gaceq(aux63,det)
lexleq([M_00000_00000, M_00000_00001, M_00000_00002],[M_00001_00000, M_00001_00001, M_00001_00002])
sumleq([aux19,aux25,aux30,aux35,aux40,aux46],aux47)
sumgeq([aux19,aux25,aux30,aux35,aux40,aux46],aux47)
sumleq([aux50,aux53,aux56,aux58,aux60,aux62],aux63)
sumgeq([aux50,aux53,aux56,aux58,aux60,aux62],aux63)
**EOF**
