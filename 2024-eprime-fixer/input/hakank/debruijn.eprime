$
$ de Bruijn sequencein Essence'.
$
$   Implementation of de Bruijn sequences in Comet, both "classical" 
$   and "arbitrary". 
$
$   Compare with the the web based programs:
$     http://www.hakank.org/comb/debruijn.cgi   
$     http://www.hakank.org/comb/debruijn_arb.cgi
$
$   And the following in other constraint programming systems
$   * MiniZinc: http://www.hakank.org/minizinc/debruijn_binary.mzn
$   * Choco   : http://www.hakank.org/choco/DeBruijn.java
$   * JaCoP   : http://www.hakank.org/JaCoP/DeBruijn.java
$   * JaCoP   : http://www.hakank.org/JaCoP/DeBruijnIterate.java
$   * Gecode/R: http://www.hakank.org/gecode_r/debruijn_binary.rb
$   * Comet   : http://www.hakank.org/comet/debruijn.co
$   * Gecode  : http://www.hakank.org/gecode/debruijn.cpp
$   * ECLiPSe : http://www.hakank.org/eclipse/debruijn.ecl
$
$  For base = 2, n = 3, m = base^n = 8 there are 2 solutions:
$   x       : 0 1 2 5 3 7 6 4 
$   bin_code: 0 0 0 1 0 1 1 1 
$
$   x       : 0 1 3 7 6 5 2 4 
$   bin_code: 0 0 0 1 1 1 0 1 
$
$ Model created by Hakan Kjellerstrand, hakank@gmail.com
$ See also my Essence'/Tailor page: http://www.hakank.org/savile_row/
language ESSENCE' 1.0

$ param base be 3
$ param n be 4
$ param m be 10 $ base^n
 
given base : int
given n    : int
given m    : int

find x      : matrix indexed by [int(1..m)] of int(0..(base**n)-1)
find binary : matrix indexed by [int(1..m), int(1..n)] of int(0..base-1)
find bin_code: matrix indexed by [int(1..m)] of int(0..base-1)

such that
   allDiff(x),

   $ convert x[i] <-> binary[i,..]
   forall i : int(1..m) .
      x[i] = (sum j : int(1..n) .base**(n-j)*binary[i,j]),

   $ debruijn property for the nodes
   forall i : int(2..m) .
       forall j : int(2..n) . binary[i-1, j] = binary[i, j-1],
   $ around the corner
   forall j : int(2..n) . binary[m, j] = binary[1, j-1],

   $ convert binary -> bin_code
   forall i : int(1..m) . bin_code[i] = binary[i,1],

   $ symmetry breaking: x[1] is the minimum number
   forall i : int(2..m) . x[1] < x[i]
 



