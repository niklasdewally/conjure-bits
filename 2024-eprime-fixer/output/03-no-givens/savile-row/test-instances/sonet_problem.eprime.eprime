$$ param file: savile-row/test-instances/sonet_problem.eprime.param

language ESSENCE' 1.0

letting r be 4
letting n be 5

letting demand be 
        [[0,1,0,1,0],
         [1,0,1,0,0],
         [0,1,0,0,1],
         [1,0,0,0,0],
         [0,0,1,0,0]]

letting capacity_nodes be [3,2,2,1]

$$ model file: savile-row/test-instances/sonet_problem.eprime

$ given r : int(1..1000)
$ given n : int(1..1000)
$ given demand : matrix indexed by [int(1..n),int(1..n)] of int(0..1)
$ given capacity_nodes : matrix indexed by [int(1..r)] of int(1..n)
find rings : matrix indexed by [int(1..r),int(1..n)] of bool
minimising (sum ring : int(1..r) . (sum client : int(1..n) . rings[ring, client]))
such that
(forAll client1 : int(1..n) . (forAll client2 : int(1..n) . (((client1<client2)) -> ((((demand[client1, client2]=1)) -> (exists ring : int(1..r) . (2<=(rings[ring, client1] + rings[ring, client2])))))))),
(forAll ring : int(1..r) . (((sum client : int(1..n) . rings[ring, client]))<=capacity_nodes[ring]))
