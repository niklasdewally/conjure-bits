$
$ Set covering, scheduling in Essence'.
$
$ Example from the Swedish book 
$ Lundgren, Ronnqvist, Varbrand "Optimeringslara", page 410.
$ 
$ Work schedule for a security company with three employees: Anders, Lotta, Per
$ (common swedish names).
$
$ The tasks has different qualifications, and each person
$ may give preferences to each task (each person has 10 points to spread).
$
$ Task     Time (h)  Anders           Lotta            Per
$                        Qualify, Points  Qualify, Points  Qualify, Points
$  1             4         X        5      X         4       
$  2             3         X        2                        X       2
$  3             3         X        1      X         2       X       4
$  4             3                         X         2       X       1
$  5             3         X        1                        X       1
$  6             2         X        1                        X       2
$  7             2                         X         1
$  8             2                         X         1
$
$ Each person must work 7 or 8 hour per night.
$
$ From the table above, 19 different combinations is construed, given at
$ page 412. See the data section for the combinations.
$
$ The problem is now to assign one combination to each person so
$ that all tasks is covered exactly once, and maximizing the total
$ preference points.
$
$ The answer from the book, page 413: 
$ The combination is 1 (Anders), 13 (Lotta), 18 (Per) with the following
$ tasks:
$   Anders: 1,2    Lotta: 4,7,8    Per: 3,5,6
$
$ The total preference points is 18.
$ 
$
$ The following solutions is returned with solve satisfy.
$ There are two solutions with total preference points of 18.
$
$ The employee and his/her combinations:
$    anders: 1..6, lotta: 7..13, per: 14..19
$
$ The solutions
$      1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19                   
$
$ Solution 1:
$ x = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0]
$ comb:      3                         12       15
$ tasks      3: 1,5  12: 3,7,8   15: 2,4,6   ALL!
$ points        5+1       2+1+1       2+1+2  = 6+4+4  = 14  
$
$ Solution 2:
$ x = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0]
$ comb:   2                               13       16
$ tasks: 2: 1,3   13: 4,7,8   16: 2,5,6  ALL!
$ points:         5+1       2+1+1       2+1+2 = 6+4+5 = 15    
$
$ Solution 3:
$ x = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1]
$ comb 1                               12                   19
$ tasks:   1: 1,2    12: 3,7,8   19: 4,5,6  ALL!     
$ points:         5+2        2+1+1       1+1+2 = 7+4+4= 15
$
$ Solution 4:
$ x = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
$ comb:      3                            13 14
$ tasks: 3: 1,5    13: 4,7,8     14:2,3,6  ALL!
$ points:         5+1        2+1+1        2+4+2 = 6+4+8 = 18
$
$ Solution 5:
$ x = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0]
$ comb:1                                  13             18
$ tasks: 1: 1,2    13:4,7,8    18: 3,5,6   ALL!
$ points          5+2       2+1+1        4+1+2   = 7 + 4 + 7 = 18
$
$ Solution 5 is the one given in the book, but solution 4 is also
$ optimal. Solution 5 is slighly fairer than solution 4, 
$ since it gives equal points to Anders and Per.
$ 
$
$ Model created by Hakan Kjellerstrand, hakank@gmail.com
$ See also my Essence'/Tailor page: http://www.hakank.org/savile_row/
$
language ESSENCE' 1.0

letting num_combinations be 19
letting num_tasks be 8
letting num_persons be 3

letting combinations_person: matrix indexed by [int(1..num_combinations)] of int(1..num_persons) be 
 [
  $ Anders, comb. 1..6
  1, 1, 1, 1, 1, 1,

  $ Lotta, comb. 7..13
  2, 2, 2, 2, 2, 2, 2,

  $ Per, comb., 14..19
  3, 3, 3, 3, 3, 3
]

letting preferences: matrix indexed by [int(1..num_persons), int(1..num_tasks)] of int(0..10) be
   [ 
    $ 1 2 3 4 5 6 7 8
    [5,2,1,0,1,1,0,0], $ Anders
    [4,0,2,2,0,0,1,1], $ Lotta
    [0,2,4,1,1,2,0,0]  $ Per
   ]

$ Essence' don't support sets so we translate to matrix version
letting c: matrix indexed by [int(1..num_combinations), int(1..num_tasks)] of int(0..3) be
  [
  $ Anders
  $ {1,2},   $ 1
  [1,1,0,0,0,0,0,0],
  $ {1,3},   $ 2
  [1,0,3,0,0,0,0,0],
  $ {1,5},   $ 3
  [1,0,0,0,1,0,0,0],
  $ {2,3,6}, $ 4
  [0,1,1,0,0,1,0,0],
  $ {2,5,6}, $ 5
  [0,1,0,0,1,1,0,0],
  $ {3,5,6}, $ 6 
  [0,0,1,0,1,1,0,0],

  $ Lotta
  $ {1,3},   $ 7
  [1,0,1,0,0,0,0,0],
  $ {1,4},   $ 8
  [1,0,0,1,0,0,0,0],
  $ {1,7,8}, $ 9
  [1,0,0,0,0,0,1,1],
  $ {3,4,7}, $ 10
  [0,0,1,1,0,0,1,0],
  $ {3,4,8}, $ 11
  [0,0,1,1,0,0,0,1],
  $ {3,7,8}, $ 12
  [0,0,1,0,0,0,1,1],
  $ {4,7,8}, $ 13
  [0,0,0,1,0,0,1,1],

  $ Per
  $ {2,3,6}, $ 14
  [0,1,1,0,0,1,0,0],
  $ {2,4,6}, $ 15
  [0,1,0,1,0,1,0,0],
  $ {2,5,6}, $ 16
  [0,1,0,0,1,1,0,0],
  $ {3,4,6}, $ 17
  [0,0,1,1,0,1,0,0],
  $ {3,5,6}, $ 18 
  [0,0,1,0,1,1,0,0],
  $ {4,5,6}  $ 19
  [0,0,0,1,1,1,0,0]
  ]

letting preference_range be domain int(1..10)

find x: matrix indexed by [int(1..num_combinations)] of int(0..1)
find preference_points: matrix indexed by [int(1..num_persons)] of preference_range
find sum_pref_points: int(0..1000)

minimising sum_pref_points

such that
 $ choose one combination for each person
 forall p: int(1..num_persons) . 
   (sum j: int(1..num_combinations) . (combinations_person[j] = p)*x[j]) = 1
   /\   
   $ calculate the preference points for the person
   preference_points[p] = sum i: int(1..num_combinations) .
                             sum j: int(1..num_tasks) . 
                                     (combinations_person[i] = p)*x[i]*c[i,j]*preferences[p,j]
 ,
 $ all tasks must be covered exactly once
 forall j: int(1..num_tasks) .
     (sum i: int(1..num_combinations) . x[i] *c[i,j]) = 1
 ,
 sum_pref_points = sum i: int(1..num_persons) . preference_points[i]
 $ , sum_pref_points = 15  $ testing distinct optimal solutions (there are 2)
  


   
