$
$ Organizing a day in Essence'.
$
$ Problem formulation:
$ Slides on (finite domain) Constraint Logic Programming, page 38f
$
$ http://www.icparc.ic.ac.uk/eclipse/reports/eclipse.ppt
$ (via http://www.icparc.ic.ac.uk/eclipse/reports/ )
$
$ Model created by Hakan Kjellerstrand, hakank@gmail.com
$ See also my Essence'/Savile Row page: http://www.hakank.org/savile_row/
$
language ESSENCE' 1.0

$ The tasks are: [Work, Mail, Shop, Bank]
letting n be 4
letting range be domain int(1..n)
letting duration     = [4,1,2,1]
letting before_tasks = [ [4,3], [2,1] ]

find begin: matrix indexed by [ range ] of int(9..17)
find end  : matrix indexed by [ range ] of int(9..17)

such that
  forAll i: range . end[i] = begin[i] + duration[i],
  forAll i,j : range . 
     (i < j) ->
        (
         (begin[i] + duration[i] <= begin[j])
         \/
         (begin[j] + duration[j] <= begin[i])
        )
  ,
  forAll i: int(1..2) . end[before_tasks[i,1]] <= begin[before_tasks[i,2]],
  begin[1] >= 11
