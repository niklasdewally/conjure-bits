$
$ Assignment problem in Essence'.
$ 
$ Winston "Operations Research", Assignment Problems, page 393f
$
$ (generalized version with added test column)
$
$ Compare with the following models:
$ * Comet: <a href="/comet/assignment.co
$ * ECLiPSE: <a href="/eclipse/assignment.ecl
$ * Gecode: <a href="/gecode/assignment.cpp
$ * MiniZinc: <a href="/minizinc/assignment.mzn
$
$ Model created by Hakan Kjellerstrand, hakank@gmail.com
$ See also my Essence'/Tailor page: http://www.hakank.org/savile_row/
$
language ESSENCE' 1.0

$ FLATZINC:: solve :: int_search(x, first_fail, indomain, complete) satisfy;

letting r be 4
letting rows be domain int(1..r)
letting c be 5
letting cols be domain int(1..c)

$ hakank: I added the fifth column to make it more
$         interesting
letting cost =
  [ 
   [14,  5, 8,  7, 15], 
   [ 2, 12, 6,  5,  3], 
   [ 7,  8, 3,  9,  7], 
   [ 2,  4, 6, 10,  1]
  ]


$ given rows : int
$ given cols : int
$ given cost : matrix indexed by [int(1..rows), int(1..cols)] of int(0..100)

find x : matrix indexed by [rows, cols] of int(0..1)
find total_cost : int(0..1000)

minimising total_cost

such that
   $ exacly one assignment per row, all rows must be assigned   
   forall i : rows . (sum j : cols . x[i,j]) = 1,

   $ zero or one assignments per column
   forall j : cols . (sum i : rows . x[i,j]) <= 1,
   $ note the nested sum here
   total_cost = sum i : rows . 
                  sum j : cols . 
                     x[i,j]*cost[i,j]
