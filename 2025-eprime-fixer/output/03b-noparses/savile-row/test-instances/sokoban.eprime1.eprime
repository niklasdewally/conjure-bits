$$ param file: savile-row/test-instances/sokoban.eprime1.param

$  # - Wall
$  . - Target Position
$  @ - Porter
$  $ - Crate
$    - Empty Cell
$
$
$
$ First instance from 
$ http://users.bentonrea.com/~sasquatch/sokoban/m1
$  
$  012345
$ 0####
$ 1# .#
$ 2#  ###
$ 3# @  #
$ 4#  $ #
$ 5#  ###
$ 6####
$
$ width: 6
$ height: 7

language ESSENCE' 1.0

letting w be 6
letting n be 42

letting noCrates be 1
letting noGoals be 1

letting pInit be 20
letting stps be 14 $ don't know how many?

letting walls be [ 0,  1,  2,  3,  4,  5,    $  6

                   6,          9, 10, 11,    $  4
    
                  12,         15, 16, 17,    $  4
              
                  18,                 23,    $  2
  
                  24,                 29,    $  2

                  30,         33, 34, 35,    $  4

                  36, 37, 38, 39, 40, 41 ]   $  6

                                    $       --------
                                    $ noWalls:  28
letting noWalls be 28

letting crates be [27]
letting goals be [8] 









                  
$$ model file: savile-row/test-instances/sokoban.eprime

$ given w : int(..)
$ given n : int(..)
$ given pInit : int(..)
$ given stps : int(..)
$ given noWalls : int(..)
$ given noInvalidMoves : int(..)
$ given noGoals : int(..)
$ given noCrates : int(..)
letting WALLINDICES be domain int(0..(noWalls - 1))
letting GOALINDICES be domain int(0..(noGoals - 1))
letting CRATEINDICES be domain int(0..(noCrates - 1))
letting POSITIONS be domain int(0..(n - 1))
$ given walls : matrix indexed by [WALLINDICES] of POSITIONS
$ given invalidMoves : matrix indexed by [INVALIDMOVEINDICES] of MOVES
$ given goals : matrix indexed by [GOALINDICES] of int(0..(n - 1))
$ given crates : matrix indexed by [CRATEINDICES] of int(0..(n - 1))
letting MOVES be (((int((-w)) union int((-1))) union int(1)) union int(w))
letting STEPS be domain int(0..(stps - 1))
find sokPosn : matrix indexed by [STEPS] of int(0..(n - 1))
find move : matrix indexed by [int(0..(stps - 2))] of MOVES
find crateGoalPosns : matrix indexed by [STEPS,CRATEINDICES] of int(0..(n - 1))
such that
(sokPosn[0]=pInit),
(forAll i : STEPS . (forAll wll : WALLINDICES . (sokPosn[i]!=walls[wll]))),
(forAll i : int(0..(stps - 2)) . (sokPosn[(i + 1)]=((sokPosn[i] + move[i])))),
(forAll ck : int(0..(noCrates - 1)) . (crateGoalPosns[0, ck]=crates[ck])),
(forAll s : STEPS . allDiff(crateGoalPosns[s,..])),
(forAll k : int(0..(stps - 2)) . (forAll c : CRATEINDICES . ((((sokPosn[(k + 1)]=crateGoalPosns[k, c])) -> ((crateGoalPosns[(k + 1), c]=((crateGoalPosns[k, c] + move[k])))))))),
(forAll i : int(0..(stps - 2)) . (forAll c : CRATEINDICES . ((((sokPosn[(i + 1)]=crateGoalPosns[i, c])) \/ ((crateGoalPosns[(i + 1), c]=crateGoalPosns[i, c])))))),
(forAll c : CRATEINDICES . (exists g : GOALINDICES . (crateGoalPosns[(stps - 1), c]=goals[g])))
