$ 
$ Set covering problem in Essence'
$
$  This example is from the OPL example covering.mod
$  """
$  Consider selecting workers to build a house. The construction of a 
$  house can be divided into a number of tasks, each requiring a number of 
$  skills (e.g., plumbing or masonry). A worker may or may not perform a 
$  task, depending on skills. In addition, each worker can be hired for a 
$  cost that also depends on his qualifications. The problem consists of 
$  selecting a set of workers to perform all the tasks, while minimizing the 
$  cost. This is known as a set-covering problem. The key idea in modeling 
$  a set-covering problem as an integer program is to associate a 0/1 
$  variable with each worker to represent whether the worker is hired. 
$  To make sure that all the tasks are performed, it is sufficient to 
$  choose at least one worker by task. This constraint can be expressed by a 
$  simple linear inequality.
$  """ 
$
$ Model created by Hakan Kjellerstrand, hakank@gmail.com
$ See also my Essence'/Tailor page: http://www.hakank.org/savile_row/
$
language ESSENCE' 1.0

letting num_workers be 32
letting Workers be domain int(1..num_workers)
letting num_tasks be 15
letting Tasks be domain int(1..num_tasks)

letting Cost: matrix indexed by [Workers] of int(1..10) be 
    [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9 ]

$ converting set based to binary...
letting Qualified: matrix indexed by [Tasks, Workers] of int(0..1) be
  [
  $ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
   $ { 1,  9, 19,  22,  25,  28,  31 },
   [1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0],
   ${ 2, 12, 15, 19, 21, 23, 27, 29, 30, 31, 32 },
   [0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,1,1],
   ${ 3, 10, 19, 24, 26, 30, 32 },
   [0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,1],
   ${ 4, 21, 25, 28, 32 },
   [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1],
   ${ 5, 11, 16, 22, 23, 27, 31 },
   [0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0],
   ${ 6, 20, 24, 26, 30, 32 },
   [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1],
   ${ 7, 12, 17, 25, 30, 31 } ,
   [0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0],
   ${ 8, 17, 20, 22, 23  },
   [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0],
   ${ 9, 13, 14,  26, 29, 30, 31 },
   [0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0],
   ${ 10, 21, 25, 31, 32 },
   [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1],
   ${ 14, 15, 18, 23, 24, 27, 30, 32 },
   [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,0,1,0,0,1,0,1],
   ${ 18, 19, 22, 24, 26, 29, 31 },
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0],
   ${ 11, 20, 25, 28, 30, 32 },
   [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,1],
   ${ 16, 19, 23, 31 },
   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0],
   ${ 9, 18, 26, 28, 31, 32 }
   [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,1]
]


$ decision variables
find Hire: matrix indexed by [Workers] of int(0..1)
find z: int(1..10*num_workers)

minimising z

such that
  z = sum c: Workers . Cost[c] * Hire[c],  
  forall t: Tasks .
    (sum w: Workers . (Qualified[t,w]=1)*Hire[w] ) >= 1


