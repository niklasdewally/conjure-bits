$$ param file: savile-row/test-instances/sportsScheduling.eprime.param

language ESSENCE' 1.0

letting n be 8
letting values be [[1, 2, 1],
                      [1, 3, 2],
                      [1, 4, 3],
                      [2, 3, 4],
                      [2, 4, 5],
                      [3, 4, 6]]
$$ model file: savile-row/test-instances/sportsScheduling.eprime

$ given n : int(..)
$ given values : matrix indexed by [int(1..6),int(1..3)] of int(1..6)
letting TEAMS be domain int(1..n)
letting GAMES be domain int(1..(((n * ((n - 1))))/2))
letting WEEKS be domain int(1..(n - 1))
letting PERIODS be domain int(1..(n/2))
letting HOMEAWAY be domain int(1..2)
find schedule : matrix indexed by [WEEKS,PERIODS,HOMEAWAY] of TEAMS
find game : matrix indexed by [WEEKS,PERIODS] of GAMES
such that
(forAll w : WEEKS . allDiff(flatten(schedule[w,..,..]))),
(forAll p : PERIODS . atmost(flatten(schedule[..,p,..]),[2, 2, 2, 2],[1, 2, 3, 4])),
allDiff(flatten(game)),
(forAll w : WEEKS . (forAll p : PERIODS . table([schedule[w, p, 1], schedule[w, p, 2], game[w, p]], values))),
(forAll w : WEEKS . (forAll p : PERIODS . (schedule[w, p, 1]<schedule[w, p, 2]))),
(forAll w : int(1..(n - 2)) . (flatten(schedule[w,..,..]) <=lex flatten(schedule[(w + 1),..,..]))),
(forAll p : int(1..((n/2) - 1)) . (flatten(schedule[..,p,..]) <=lex flatten(schedule[..,(p + 1),..])))
