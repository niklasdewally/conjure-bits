$
$ Calculs d'enfer puzzle in Essence'
$
$ Problem from Jianyang Zhou "The Manual of NCL version 1.2", page 33
$ http://citeseer.ist.psu.edu/161721.html
$  
$ The solution is the manual is:
$ """
$ a = -16, b = -14, c = -13, d = -12, e = -10,
$ f = 4, g = 13, h = -1, i = -3, j = -11, k = -9,
$ l = 16, m = -8, n = 11, o = 0, p = -6, q = -4,
$ r = 15, s = 2, t = 9, u = -15, v = 14, w = -7,
$ x = 7, y = -2, z = -5.
$
$ max_{#1\in [1,26]}{|x_{#1}|} minimized to 16
$ """
$
$ Compare with the following models:
$ * Comet   : http://www.hakank.org/comet/calculs_d_enfer.co
$ * ECLiPSe : http://www.hakank.org/eclipse/calculs_d_enfer.ecl
$ * Gecode  : http://www.hakank.org/gecode/calculs_d_enfer.cpp
$ * MiniZinc: http://www.hakank.org/minizinc/calculs_d_enfer.mzn
$
$ Model created by Hakan Kjellerstrand, hakank@gmail.com
$ See also my Essence'/Tailor page: http://www.hakank.org/savile_row/
$
language ESSENCE' 1.0

$ Minion: 
$ Using the -varorder option srf makes it much faster:
$   minion -varorder srf calculs_d_enfer.eprime.minion
$ Note: In Savile Row this can be stated directly by
$       (the experimental feature) branching / heuristic
$
letting N be 26
letting R be domain int(-100..100)

find a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z : R

find A : matrix indexed by [int(1..N)] of R
find A_abs : matrix indexed by [int(1..N)] of int(0..N)
find a_max : int(0..N)

$ note: this is stated as experimental in the Savile Row tutorial
branching on [A]
  heuristic srf


$ The objective is to minimize the maximum of the absolute values of A[i]
minimising a_max

such that

  allDiff(A),

  $ how do I initialize an "alias" of decision variables to an array?
  $ I.e. what I want to do is this:
  $ A = [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z]
  A[1] = a,
  A[2] = b,
  A[3] = c,
  A[4] = d,
  A[5] = e,
  A[6] = f,
  A[7] = g,
  A[8] = h,
  A[9] = i,
  A[10] = j,
  A[11] = k,
  A[12] = l,
  A[13] = m,
  A[14] = n,
  A[15] = o,
  A[16] = p,
  A[17] = q,
  A[18] = r,
  A[19] = s,
  A[20] = t,
  A[21] = u,
  A[22] = v,
  A[23] = w,
  A[24] = x,
  A[25] = y,
  A[26] = z,

  forAll i2 : int(1..N) . A_abs[i2] = |A[i2]| ,

  $ a_max is the maximum of A_abs
  forAll i2 : int(1..N) . a_max >= A_abs[i2],

  z+e+r+o = 0,
  o+n+e = 1,
  t+w+o = 2,
  t+h+r+e+e = 3,
  f+o+u+r = 4,
  f+i+v+e = 5,
  s+i+x = 6,
  s+e+v+e+n = 7,
  e+i+g+h+t = 8,
  n+i+n+e = 9,
  t+e+n = 10,
  e+l+e+v+e+n = 11,
  t+w+e+l+f = 12
