$$ param file: savile-row/test-instances/cryptArithmetic.eprime.param

language ESSENCE' 1.0

$ params for EAT + THAT = APPLE

$ Letter indexing scheme
$ 1 E
$ 2 A
$ 3 T
$ 4 H
$ 5 P
$ 6 L

letting noLetters be 6

letting word1 be [1, 2, 3; int(1..sum([1 | i :int(1..3)]))]

letting word2 be [3, 4, 2, 3; int(1..4)]

letting word3 be [2, 5, 5, 6, 1; int(1..factorial(3)-1)]
$$ model file: savile-row/test-instances/cryptArithmetic.eprime

$ given noLetters : int(..)
$ given word1 : matrix indexed by [int(1..word1Length)] of int(1..noLetters)
$ given word2 : matrix indexed by [int(1..word2Length)] of int(1..noLetters)
$ given word3 : matrix indexed by [int(1..word3Length)] of int(1..noLetters)
find letters : matrix indexed by [int(1..noLetters)] of int(0..9)
find word1Sum : int(1..(10**word1Length))
find word2Sum : int(1..(10**word2Length))
find word3Sum : int(1..(10**word3Length))
such that
(letters[word1[1]]!=0),
(letters[word2[1]]!=0),
(letters[word3[1]]!=0),
(word1Sum=(sum i : int(1..word1Length) . (letters[word1[i]] * (10**((word1Length - i)))))),
(word2Sum=(sum i : int(1..word2Length) . (letters[word2[i]] * (10**((word2Length - i)))))),
(word3Sum=(sum i : int(1..word3Length) . (letters[word3[i]] * (10**((word3Length - i)))))),
((word1Sum + word2Sum)=word3Sum),
allDiff(letters)
