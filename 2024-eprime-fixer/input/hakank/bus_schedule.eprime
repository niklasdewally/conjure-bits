$
$ Bus scheduling in Essence'.
$
$ Problem from Taha "Introduction to Operations Research", page 58.
$
$ This is a slightly more general model than Taha's.
$
$ Compare with the following models:
$ * MiniZinc: http://www.hakank.org/minizinc/bus_scheduling.mzn
$ * Comet   : http://www.hakank.org/comet/bus_schedule.co
$ * ECLiPSe : http://www.hakank.org/eclipse/bus_schedule.ecl
$ * Gecode  : http://www.hakank.org/gecode/bus_schedule.cpp
$
$
$ Model created by Hakan Kjellerstrand, hakank@gmail.com
$ See also my Essence'/Tailor page: http://www.hakank.org/savile_row/
$
language ESSENCE' 1.0

$ given time_slots : int(1..6)  $ number of time slots
$ demands: minimum number of buses at time t
$ given demands : matrix indexed by [int(1..time_slots)] of int(1..10)

letting time_slots be 6
letting demands = [8,10,7,12,4,4]

$ result array: how many buses start the schedule at time slot t
find x : matrix indexed by [int(1..time_slots)] of int(0..1000)
$ the objective to minimize: the total number of buses
find z : int(0..100)

$ minimize the number of buses needed
$ solve :: int_search(x, first_fail, indomain, complete) minimize z;
minimising z

such that 
   z = sum i : int(1..time_slots) . x[i],
   $ demand "around the clock"
   4  = x[time_slots] + x[1],

   $ meet the demands for this and the next time slot
   forall i : int(1..time_slots-1) . x[i]+x[i+1] >= demands[i]

  $  for solve satisfy
  $ , z <= 26


