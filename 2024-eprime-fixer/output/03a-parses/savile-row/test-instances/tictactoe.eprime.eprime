$$ param file: savile-row/test-instances/tictactoe.eprime.param

language ESSENCE' 1.0

letting steps be 7
letting WINNER be 1 $  0:black
                    $  1:white
$$ model file: savile-row/test-instances/tictactoe.eprime

$ given steps : int(..)
letting EMPTY be 2
letting WHITE be 1
letting BLACK be 0
$ given WINNER : int(0..1)
letting LOOSER be (((WINNER + 1))%2)
letting STEPS0 be domain int(0..steps)
letting STEPS1 be domain int(1..steps)
letting LENGTH be domain int(1..3)
letting FIELD_STATUS be domain int(0..2)
find tickTackToe : matrix indexed by [STEPS0,LENGTH,LENGTH] of FIELD_STATUS
such that
(forAll i : LENGTH . (forAll j : LENGTH . (tickTackToe[0, i, j]=EMPTY))),
(((forAll step : STEPS1 . (((sum row : LENGTH . (sum col : LENGTH . tickTackToe[(step - 1), row, col])))=((sum row : LENGTH . (sum col : LENGTH . tickTackToe[step, row, col])))))) \/ ((forAll step : STEPS1 . ((((sum row : LENGTH . (sum col : LENGTH . tickTackToe[(step - 1), row, col]))) - ((((step%2)) + 1)))=((sum row : LENGTH . (sum col : LENGTH . tickTackToe[step, row, col]))))))),
(forAll step : STEPS0 . ((((step%2)=0)) -> ((((sum row : LENGTH . (sum col : LENGTH . ((tickTackToe[step, row, col]=BLACK)))))=((sum row : LENGTH . (sum col : LENGTH . ((tickTackToe[step, row, col]=WHITE))))))))),
(forAll step : STEPS1 . ((exists row : LENGTH . (exists col : LENGTH . ((((tickTackToe[(step - 1), row, col]=EMPTY)) /\ ((tickTackToe[step, row, col]=(((step%2)) + 1)))) /\ (forAll i : LENGTH . (forAll j : LENGTH . (((((i!=row)) /\ ((j!=col)))) -> ((tickTackToe[step, i, j]=tickTackToe[(step - 1), i, j])))))))))),
(forAll step : STEPS1 . (forAll row : LENGTH . (forAll col : LENGTH . (((tickTackToe[(step - 1), row, col]!=EMPTY)) -> ((tickTackToe[step, row, col]=tickTackToe[(step - 1), row, col])))))),
(((((exists row : LENGTH . (forAll col : LENGTH . ((tickTackToe[steps, row, col]=WINNER))))) \/ ((exists col : LENGTH . (forAll row : LENGTH . ((tickTackToe[steps, row, col]=WINNER)))))) \/ ((forAll i : LENGTH . (tickTackToe[steps, i, i]=WINNER)))) \/ (((((tickTackToe[steps, 1, 3]=WINNER)) /\ ((tickTackToe[steps, 2, 2]=WINNER))) /\ ((tickTackToe[steps, 3, 1]=WINNER))))),
(((((forAll row : LENGTH . (exists col : LENGTH . ((tickTackToe[steps, row, col]!=LOOSER))))) \/ ((forAll col : LENGTH . (exists row : LENGTH . ((tickTackToe[steps, row, col]!=LOOSER)))))) \/ ((exists i : LENGTH . (tickTackToe[steps, i, i]!=LOOSER)))) \/ (((((tickTackToe[steps, 1, 3]!=LOOSER)) \/ ((tickTackToe[steps, 2, 2]!=LOOSER))) \/ ((tickTackToe[steps, 3, 1]!=LOOSER)))))
